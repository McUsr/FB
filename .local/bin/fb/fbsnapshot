#!/bin/bash
# fbsnapshot.
# fbsnapshot Take an adhoc backup of a folder - a snapshot.
# 2022 (c) Mcusr -- Vim license.
# shellcheck disable=SC2089
VERSION="\"v0.0.4\""
curscheme="OneShot"


ERR_IGNORE=1
err_report() {
  if [[ $ERR_IGNORE -ne 0  ]] ; then
    echo >&2 "$PNAME : Error on line $1"
    echo >&2 "$PNAME : Please report this issue at \
'https://github.com/McUsr/FB/issues'"
  fi
}

trap 'err_report $LINENO' ERR

# dieIfCantSourceShellLibrary()
# sources the ShellLibraries
# so we can perform the rest of the tests.
# TODO: Think of modus.
dieIfCantSourceShellLibrary() {
  if [[ $# -ne 1 ]] ; then
    echo -e >&2 "$PNAME/${FUNCNAME[0]} : Need an\
    argument, an existing fb shell library file!\nTerminates..." >&2
    exit 5
  fi
  if [[ -r "${1}" ]] ; then
    # shellcheck disable=SC1090
    source "${1}"
  #  source "$fpth"/service_functions.sh
  else
    echo -e >&2 "$PNAME/${FUNCNAME[0]} : Can't find/source: ${1}\
      \nTerminates... " >&2
    exit 255
  fi
}


pathToSourcedFiles() {
  # shellcheck disable=SC2001,SC2086  # Escaped by sed
  pthname="$( echo $0  | sed 's/ /\\ /g' )"
  # We do escape any spaces, in the file name, 
  #  knew it could never happen, just in case.
  # shellcheck disable=SC2086  # Escaped by sed
  fpth="$(realpath $pthname)"; fpth="${fpth%/*}"
  echo "$fpth"
}

# Program vars, read only,
PNAME=${0##*/}

MODE="CONSOLE"

fbBinDir="$(pathToSourcedFiles)"
THROUGH_SHELLCHECK=0

if [[ $THROUGH_SHELLCHECK -ne 0  ]] ; then
# shellcheck source=./service_functions.sh
  dieIfCantSourceShellLibrary "$fbBinDir"/service_functions.sh
else
# bootstrapping libraries before figuring system paths.
# shellcheck source=service_functions.sh
  source "$fbBinDir"/service_functions.sh
fi

ERR_IGNORE=0

DRY_RUN=false
# controls whether we are going to print the backup command to the
# console/journal, (when DRY_RUN=0) or if were actually going to perform.
DEBUG=0
#
# prints out debug messages to the console/journal if its on when instigated\
# systemd --user.

dieIfMandatoryVariableNotSet FB "$RUNTIME_MODE" "$curscheme"
dieIfMandatoryVariableNotSet XDG_BIN_HOME "$RUNTIME_MODE" "$curscheme"

# Checks if we can get online so we have a guarranteed connection to our\
# Google Drive

dieIfNotDirectoryExist "$XDG_BIN_HOME"
dieIfNotDirectoryExist "$XDG_BIN_HOME/fb"


if [[ $THROUGH_SHELLCHECK -ne 0  ]] ; then
  dieIfCantSourceShellLibrary "$fbBinDir"/shared_functions.sh
else
# shellcheck source=shared_functions.sh
  source "$fbBinDir"/shared_functions.sh
fi

dieIfNotOkBashVersion

consoleHasInternet "$curscheme"

consoleFBfolderIsMounted "$curscheme"

# shellcheck disable=SC2034
GETOPT_COMPATIBLE=true

if [[ $# -eq 0 ]] ; then
  echo -e >&2 "$PNAME : Too few arguments. At least I need a path to a directory,\
    I should make a backup of.\nExecute \"$PNAME -h\" for help.\
    Terminating..."
 exit 2
fi

help() {
cat  << EOF

$PNAME:  Backups the folder specified into the folder backup system OneShot
         root-directory, under the path name of the folder, and yet another
         folder specifying time and date, for coherent access across the
         folder backup system.

Syntax:

  $PNAME [options] <source folder>

  Options:

  -h | --help.    Shows this help.
  -n | --dry-run  Shows what would have happened
  -v | --verbose  Shows more detailed output.
  -V | --version  Shows the version of $PNAME ($VERSION).
  -c | --create-exclude-file Lets you use $EDITOR to edit a file with globs
                             for tar to  exclude from the backup.

EOF
}
# https://stackoverflow.com/questions/402377/using-getopts-to-process-long-and-short-command-line-options
TEMP=$(getopt -o chnvV --longoptions create-exclude-file,help,dry-run,verbose,version  -n "$PNAME" -- "$@")

# shellcheck disable=SC2181
if [[ $? != 0 ]] ; then
  echo >&2 "$PNAME -h | --help for help :  Terminating..."
  exit 2
fi

ERR_IGNORE=1
# Note the quotes around '$TEMP': they are essential!
eval set -- "$TEMP"
VERBOSE=false
CREATE_EXCLUDE_FILE=false

if [[ $DEBUG -eq 0   ]] ; then
  echo >&2 "DBG: $*"
fi

while true; do
  case "$1" in
    -h | --help )  help ; exit 0 ;;
    -n | --dry-run ) DRY_RUN=true; shift ;;
    -v | --verbose ) VERBOSE=true; shift ;;
    -V | --version ) echo "$PNAME" : "$VERSION" ; exit 0 ;;
    -c | --create-exclude-file ) echo 'create exclude file' ; \
      CREATE_EXCLUDE_FILE=true; shift ;;
    -- ) shift; break ;;
  esac
done


# We need to collect the options we should pass along.

if [[ $# -ne 1 ]] ; then
    echo -e >&2 "$PNAME: I didn't get a mandatory parameter. A source-folder to \
      back up.\n\"$PNAME -h\" for help.\nTerminating..."
    exit 2
fi
BACKUP_OPTIONS=

if [[ $DRY_RUN = true ]] ; then
  BACKUP_OPTIONS+="--dry-run"
fi
if [[ $VERBOSE = true ]] ; then
  BACKUP_OPTIONS+=" --verbose"
fi

# --create-exclude-file isn't an option, it's more of a command.
# --dry-run doesn't work on create-exclude-file, it is useful
# to execute the rest of the command as --dry-run when we make
# the exclude file so we can see the result.

source_folder=$(realpath "$1")

if [[ $DEBUG -eq 0  || $VERBOSE = true ]] ; then
  echo >&2 "$PNAME : source_folder: $source_folder"
fi

if [[ ! -d $source_folder ]] ; then
  echo >&2 "$PNAME : $source_folder isn't a directory. Terminating..."
  exit 1
fi

# next up, is to construct the full-symlink  name

symlink_name=$(fullPathSymlinkName "$1")

if [[ $DEBUG -eq 0 || $VERBOSE = true ]] ; then
  echo >&2 "$PNAME : symlink_name: $symlink_name."
fi

backup_container="$FB"/"$curscheme"/"$symlink_name"
if [[ $DEBUG -eq 0 || $VERBOSE = true ]] ; then
  echo >&2  "$PNAME : Backups of $source_folder are stored in: $backup_container"
fi

# can be called from the OneShot routine.
# or we can somehow had our own idea of how to start
# the things up, so we just silently create it.
# we are here to solve problems, not create them.

if [[ ! -d "$backup_container" ]] ; then
  # selv om det er DRY_RUN sÃ¥ beholder vi denne!
  mkdir -p "$backup_container"
  if [[ $DEBUG -eq 0 || $VERBOSE = true ]] ; then
    echo -e >&2 "$PNAME : backup_container: $backup_container didn\'t exist.\
      \nMaking $backup_container."
  fi
else
  if [[ $DEBUG -eq 0 || $VERBOSE = true ]] ; then
    echo >&2 "$PNAME : backup_container: $backup_container DID  exist."
  fi
fi

# we generate todays folder name. which is todays 'daily' backup folder.
TODAYS_BACKUP_FOLDER="$backup_container"/"$(baseNameDateStamped "$symlink_name")"
created_todays_backup_folder=1
if [[ ! -d "$TODAYS_BACKUP_FOLDER" ]] ; then
  if [[ $DEBUG -eq 0 || $VERBOSE = true  && $DRY_RUN = false ]] ; then
    echo -e >&2 "$PNAME : TODAYS_BACKUP_FOLDER: $TODAYS_BACKUP_FOLDER didn't \
      exist. Creating it:\nmkdir -p $TODAYS_BACKUP_FOLDER."
  fi
  if [[ $DRY_RUN = false ]] ; then
    created_todays_backup_folder=0
    mkdir -p "$TODAYS_BACKUP_FOLDER"
  else
    created_todays_backup_folder=0
    echo -e  >&2 "$PNAME : Todays backup folder didn't exist, creating it:\n \
      mkdir -p $TODAYS_BACKUP_FOLDER"
  fi
else
  if [[ $DEBUG -eq 0 || $VERBOSE = true ]] ; then
    echo -e  >&2 "$PNAME : TODAYS_BACKUP_FOLDER: $TODAYS_BACKUP_FOLDER DID \
      exist."
  fi
fi

# creating an exclude file -- the block refactored into shared_functions?
# there is no dryrun in fbctl?
if [[ $CREATE_EXCLUDE_FILE = true ]] ; then
  createExcludeFile "$curscheme" "$symlink_name"
fi

# Exclude file out of the way, time to figure out if there are any "dropin"-
# scripts that should be used.

# Time to figure out which script we are going to use and making preparations:
manager "$curscheme"  "$symlink_name" backup
exit_code=$?
if [[ $exit_code  -eq 0 ]] ; then
  BACKUP_SCRIPT="$DELEGATE_SCRIPT"
else
  exit "$exitcode"
fi

if [[ $VERBOSE = true || $DEBUG -eq 0 || $DRY_RUN = true ]] ; then
  echo -e >&2 "$PNAME : EXECUTING:\n $BACKUP_SCRIPT $BACKUP_OPTIONS  \
    $source_folder  $TODAYS_BACKUP_FOLDER"
fi


exit_code=0
trap '' ERR
$BACKUP_SCRIPT $BACKUP_OPTIONS  "$source_folder"  "$TODAYS_BACKUP_FOLDER" \
"$symlink_name"
exit_code=$?

# We do some cleanup in OneShot.backup.sh
if [[ $exit_code -eq 0 &&  $DRY_RUN = false  ]] ; then
   echo  -e >&2 "$PNAME : backup  of $source_folder into $TODAYS_BACKUP_FOLDER \
     complete!"   | journalThis 5 "$curscheme"

elif [[ $exit_code -gt 1 ]] ; then

  if [[ $exit_code -eq 130 ]] ; then
      echo >&2 "$PNAME : User interrupted the operation"
  else
      echo >&2 "$PNAME : A fatal error occurred."
  fi

  if [[  -d "$TODAYS_BACKUP_FOLDER" && \
    $created_todays_backup_folder -eq 0  ]] ; then

    if [[ $DRY_RUN = false ]] ; then
      if [[ $VERBOSE = true || $DEBUG -eq 0 ]] ; then
        echo -e >&2 "$PNAME : Removing todays backup folder due to fatal errors:\
          \n rm -fr $TODAYS_BACKUP_FOLDER"
      fi
      rm -fr "$TODAYS_BACKUP_FOLDER"
    else
      echo -e >&2 "$PNAME : Removing todays backup folder due to fatal errors:\
        \n rm -fr $TODAYS_BACKUP_FOLDER"
    fi
  fi
fi
exit $exit_code
