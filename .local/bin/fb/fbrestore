#!/bin/bash
# fbrestore.
# fbrestore Restores an  an adhoc snapshot of a folder - a snapshot.
# 2022 (c) Mcusr -- Vim license.

# shellcheck disable=SC2089
VERSION="\"v0.0.4\""
curscheme="FolderBackup"
# We don't really have a scheme, restoring from every scheme.

ERR_IGNORE=1
err_report() {
  if [[ $ERR_IGNORE -ne 0  ]] ; then
    echo >&2 "$PNAME : Error on line $1"
    echo >&2 "$PNAME : Please report this issue at \
'https://github.com/McUsr/FB/issues'"
  fi
}

trap 'err_report $LINENO' ERR


# dieIfCantSourceShellLibrary()
# sources the ShellLibraries
# so we can perform the rest of the tests.
dieIfCantSourceShellLibrary() {
  if [[ $# -ne 1 ]] ; then
    echo -e >&2 "$PNAME/${FUNCNAME[0]} : Need an\
    argument, an existing fb shell library file!\nTerminates..." >&2
    exit 5
  fi
  if [[ -r "${1}" ]] ; then
    # shellcheck disable=SC1090
    source "${1}"
  #  source "$fpth"/service_functions.sh
  else
    echo -e >&2 "$PNAME/${FUNCNAME[0]} : Can't find/source: ${1}\
      \nTerminates... " >&2
    exit 255
  fi
}


pathToSourcedFiles() {
  # shellcheck disable=SC2001,SC2086  # Escaped by sed
  pthname="$( echo $0  | sed 's/ /\\ /g' )"
  # We do escape any spaces, in the file name, 
  #  knew it could never happen, just in case.
  # shellcheck disable=SC2086  # Escaped by sed
  fpth="$(realpath $pthname)"; fpth="${fpth%/*}"
  echo "$fpth"
}

# Program vars, read only, 
PNAME=${0##*/}


# shellcheck disable=SC2089
MODE="CONSOLE"

fbBinDir="$(pathToSourcedFiles)"
THROUGH_SHELLCHECK=0
if [[ $THROUGH_SHELLCHECK -ne 0  ]] ; then
# shellcheck source=./service_functions.sh
  dieIfCantSourceShellLibrary "$fbBinDir"/service_functions.sh
else
# bootstrapping libraries before figuring system paths.
# shellcheck source=service_functions.sh
  source "$fbBinDir"/service_functions.sh
fi


ERR_IGNORE=0

DRY_RUN=false
# controls whether we are going to print the backup command to the
# console/journal, (when DRY_RUN=0) or if were actually going to perform.
DEBUG=1
#
# prints out debug messages to the console/journal if its on when instigated\
# systemd --user.
# shellcheck disable=SC2034
dieIfMandatoryVariableNotSet FB "$RUNTIME_MODE" "$curscheme"
dieIfMandatoryVariableNotSet XDG_BIN_HOME "$RUNTIME_MODE" "$curscheme"


# Checks if we can get online so we have a guarranteed connection to our\
# Google Drive

dieIfNotDirectoryExist "$XDG_BIN_HOME"
dieIfNotDirectoryExist "$XDG_BIN_HOME/fb"


if [[ $THROUGH_SHELLCHECK -ne 0  ]] ; then
  dieIfCantSourceShellLibrary "$fbBinDir"/shared_functions.sh
else
# shellcheck source=shared_functions.sh
  source "$fbBinDir"/shared_functions.sh
fi


dieIfNotOkBashVersion
# We need to check if we have an internet connection
consoleHasInternet  "$curscheme"

# We need to check if the drive is mounted accordingly to $FB
consoleFBfolderIsMounted  "$curscheme"

# shellcheck disable=SC2034
GETOPT_COMPATIBLE=true

if [[ $# -eq 0 ]] ; then
  echo -e "$PNAME : Too few arguments. At least I need a backup source to \
restore from.\nExecute \"$PNAME -h\" for help. Terminating..." >&2
 exit 2
fi

help() {
cat  << EOF

$PNAME:  Restores a previous folder backup, made with the fb system.

syntax:

  $PNAME [options] <source folder> [ -o <destination> ]

  Options:

  -h| --help.    Shows this help.
  -o| --dest-dir [folder-name] Folder-name mandatory when --dest-dir given.
  -n| --dry-run  Shows what would have happened
  -v| --verbose  Shows more detailed output.
  -F| --force    Force a restore to take place directly into a folder.
  -V| --version  Shows the version of $PNAME ($VERSION).

EOF
}

# https://stackoverflow.com/questions/402377/using-getopts-to-process-long-and-short-command-line-options
TEMP=$(getopt -o hno:vFV --longoptions help,dest-dir:,verbose,dry-run,force,version -n "$PNAME" -- "$@")

# shellcheck disable=SC2181
if [[ $? != 0 ]] ; then echo "$PNAME -h | --help for help : Terminating..." \
  |  journalThis 2 OneShot ; exit 2 ; fi

ERR_IGNORE=1
# Note the quotes around '$TEMP': they are essential!
eval set -- "$TEMP"

VERBOSE=false
FORCE=false
DST_FOLDER_SET=false
# Signals if we have specified a destination folder on the command line.
while true; do
    case "$1" in
      -h | --help )  help ; exit 0 ;;
      -n | --dry-run ) DRY_RUN=true; shift ;;
      -v | --verbose ) VERBOSE=true; shift ;;
      -o | --dest-dir ) DST_FOLDER_SET=true; DEST_FOLDER="$2"; shift 2 ;;
      -F | --force ) FORCE=true ; shift ;;
      -V | --version ) echo "$PNAME : $VERSION" ; exit 0 ;;
      -- ) shift; break ;;
  #    * ) break ;;
    esac
done

# Needs to check if variables that holds files starts with one or two dashes.
# separates between longopts and shortopts for simplicity.

if [[ $DST_FOLDER_SET = false ]] ; then
  if [[ $DEBUG -eq 0 ]] ; then
    echo "$PNAME : DEST_FOLDER not set restoring into a /tmp folder."
  elif [[ $DRY_RUN = true ]] ; then
    echo "$PNAME : DEST_FOLDER not set, making one under /tmp."
  fi
else
#  echo "testing folder name $DEST_FOLDER"
  # Vet it against All the options.
  for opt in h o d v D F V ; do
   if [[ $DEST_FOLDER = "$opt"  || $DEST_FOLDER = "-$opt" ]] ; then
     echo -e "$PNAME : The destination folder has an invalid name \
($DEST_FOLDER).\n Did you forget to specify one?\
\nExecute \"$PNAME -h\" for help. Terminating..." >&2
     exit 2
   fi
  done

  for opt in help dest-dir verbose dry-run force version ; do
   if [[ $DEST_FOLDER = "$opt"  || $DEST_FOLDER = "--$opt" ]] ; then
     echo -e "$PNAME : The destination folder has an invalid name\
\n ($DEST_FOLDER).\n Did you forget to specify one?\nExecute \
\"$PNAME -h\" for help. Terminating..." >&2
     exit 2
   fi
 done
fi

PARSE_DEBUG=1
if [[ $PARSE_DEBUG -eq 0 ]] ; then
  echo "$PNAME DRY_RUN : $DRY_RUN"
  echo "$PNAME VERBOSE : $VERBOSE"
  echo "$PNAME DST_FOLDER_SET : $DST_FOLDER_SET  : DST_FOLDER : $DEST_FOLDER"
  echo "$PNAME FORCE : $FORCE"
fi

if [[ $# -ne 1 ]] ; then
  if [[ $DEBUG -eq 0  ]] ; then
    echo >&2 numargs: $#
    echo >&2 "$@"
  fi
# leniency, if we forgot the -o switch, and arg 2 exists as a folder,
# and we haven't set a dest, then we will silently let it slide through.
  if [[ $# -eq 2 && $DST_FOLDER_SET = false && -d "$2" ]] ; then
    DST_FOLDER_SET=true
    DEST_FOLDER="$2"
  else
    echo -e "$PNAME : Wrong number of   arguments. I need one argument for a \
backup source.\nExecute \"$PNAME -h\" for help. Terminating..." >&2
    exit 1
  fi
fi

RESTORE_OPTIONS=

if [[ $DRY_RUN = true ]] ; then
  RESTORE_OPTIONS+="--dry-run"
fi
if [[ $VERBOSE = true ]] ; then
  RESTORE_OPTIONS+=" --verbose"
fi
if [[ $FORCE = true ]] ; then
  RESTORE_OPTIONS+=" --force"
fi

# Check out if our source file or folder exists.
if [[ ! -r "$1" ]] ; then
  echo -e "$PNAME : I can\'t seem to find the file or folder  \"$1\".\
\nTerminating..." >&2
  exit 1
else
  BACKUP_SOURCE_REALPATH=$(realpath "$1")
  if [[ $PARSE_DEBUG -eq 0 ]] ; then
    echo -e "Found \"$1\"\n (\"$BACKUP_SOURCE_REALPATH\")" >&2
  fi
fi

KIND=$(backupKind "$1")

# DEBUG_VAR for periodic here.

if [[ "$KIND" = "OneShot" ]] ; then
  if [[ $VERBOSE = true || $DEBUG -eq 0 ]] ; then
    echo >&2 "$PNAME : Current backup KIND is One Shot Backup."
  fi
  symlink_name="$(identifyBackupSourceFolder OneShot \"$BACKUP_SOURCE_REALPATH\" )"
  echo >&2 "symlink_name : $symlink_name "
  # still need this one for figuring if we are restoring to the
  # original folder, which we won't without the --force flag.
  PATH_TO_SOURCE_FOR_BACKUP=$(pathFromFullSymlinkName "$symlink_name" )
  # Question is: Do I need anything more than this?
  # Though, I must indeed veryify that there is a timestamped folder after.
  backup_container=\
"$(identifyBackupContainerByTimeStampedFolder \
"$KIND/$symlink_name" "$BACKUP_SOURCE_REALPATH")"
  exit_code=$?
# Apparaently, it isn't that easy to exit directly, when you're in a subshell
  if [[ $exit_code -ne 0 ]] ; then
    trap '' ERR
     exit $exit_code
  fi
  backup_scheme="OneShot"
  if [[ $DEBUG -eq 0 || $VERBOSE = true ]] ; then
    echo >&2 "$PNAME : Time stamped backup container: \
$backup_container"
  fi
elif [[ "$KIND" = "Periodic" ]] ; then

  if [[ $DEBUG -eq 0  ]] ; then
    echo >&2 "$PNAME BACKUP_KIND ==  Periodic "
  fi

  backup_scheme=$(periodicBackupScheme "$BACKUP_SOURCE_REALPATH" )


  symlink_name="$(identifyBackupSourceFolder "Periodic/$backup_scheme"\
 "$BACKUP_SOURCE_REALPATH" )"

  PATH_TO_SOURCE_FOR_BACKUP=$(pathFromFullSymlinkName "$symlink_name" )
  # Question is: Do I need anything more than this?
  # Though, I must indeed veryify that there is a timestamped folder after.
  backup_container="$(identifyBackupContainerByTimeStampedFolder \
    "$KIND/$backup_scheme/$symlink_name" "$BACKUP_SOURCE_REALPATH")"
  if [[ $DEBUG -eq 0 ]] ; then
    echo >&2 "$PNAME symlink_name : $symlink_name"
    echo >&2 "$PNAME backup_container == $backup_container"
  fi

  if [[ $VERBOSE = true || $DEBUG -eq 0  ]] ;then
    echo >&2 "$PNAME : backup_scheme : >\"$backup_scheme\"<"
  fi

  if [[ "$backup_scheme" != "HourlySnapshot"  ]] ; then
    echo >&2 "$PNAME : Periodic backups NOT IMPLEMENTED YET:"
    exit 5
  fi
else
# bail out if finding a different kind. We may do something about this in \
# the future, or some kind of translation for names and stuff for the French!
  echo -e >&2 "$PNAME : WRONG BACKUP KIND DISCOVERED\nWe only handle backups of \
the \"OneShot\" or \"Periodic\" kind, not \"$KIND\".\nTerminating..."
 exit 2
fi


# DETERMINE THE BACKUP-DESTINATION
# Never do we delete the backup container if it exists, even if we happily \
# make them!

MADE_FOLDER=false
if [[ $DST_FOLDER_SET = false ]] ; then
  # We will make a folder under /tmp
  DEST_FOLDER=/tmp/$symlink_name/$backup_container
  if [[ $DRY_RUN = false ]] ; then
    if [[ ! -d "$DEST_FOLDER" ]] ; then
      MADE_FOLDER=true
      mkdir -p "$DEST_FOLDER"
    fi
  else
    if [[ -d "$DEST_FOLDER" ]] ; then
      echo -e >&2 "$PNAME : Destination folder existed, maybe with contents."
    else
      echo -e >&2 "$PNAME : Ceating time-stamped backup containing  folder,\n\
executing:  mkdir -p $DEST_FOLDER"
    fi
  fi

else
  # There is set  a destination folder on the command line.
  if [[ "$DEST_FOLDER" = "$PATH_TO_SOURCE_FOR_BACKUP" ]] ; then

    if [[ $FORCE = false ]] ; then

      # DRY_RUN not considered here, since the result is the same.

      echo -e >&2 "$PNAME : You want to to restore the backup into the original \
folder.\nYou need to apply the '--force' option on the command line to \
achieve that.\nTerminating..."
      exit 2
    fi
  else
    # no protection from doing stupid things as to restore/dump a backup into
    # the $HOME folder
    if [[ $DRY_RUN = false  ]] ; then
      if [ ! -d "$DEST_FOLDER" ] ; then
        if [[ $DEBUG -eq 0 || $VERBOSE = true ]] ; then
          echo >&2 "$PNAME : mkdir -p $DEST_FOLDER"
        fi
        MADE_FOLDER=true
        mkdir -p "$DEST_FOLDER"
      else
        if [[ $DEBUG -eq 0 || $VERBOSE = true ]] ; then
          echo >&2 "$PNAME : Dest folder for restore: $DEST_FOLDER existed. -No \
unlinking of it before the restore!"
        fi
      fi
    else
      if [ ! -d "$DEST_FOLDER" ] ; then
        MADE_FOLDER=true
        echo >&2 "$PNAME : mkdir -p $DEST_FOLDER"
      fi
    fi
  fi
fi
# At this level, we have "ironed out" KIND.
manager "$backup_scheme"  "$symlink_name" restore
exit_code=$?
if [ $exit_code  -eq 0 ] ; then
  RESTORE_SCRIPT="$DELEGATE_SCRIPT"
else
  exit $exit_code
fi


exit_code=0
if [[ $VERBOSE = true || $DEBUG -eq 0 || $DRY_RUN = true ]] ; then
  echo -e >&2 "$PNAME : EXECUTING:\n$RESTORE_SCRIPT \
$RESTORE_OPTIONS $BACKUP_SOURCE_REALPATH $DEST_FOLDER\n" \
| journalThis 7 OneShot
fi

exit_code=0
trap '' ERR
# shellcheck disable=SC2086 # No quoting of options!
$RESTORE_SCRIPT $RESTORE_OPTIONS "$BACKUP_SOURCE_REALPATH" "$DEST_FOLDER"
exit_code=$?

# We do some cleanup in OneShot.restore.sh
if [[ $exit_code -eq 0 &&  $DRY_RUN = false && \
  $VERBOSE = true || $DEBUG -eq 0 ]] ; then

  echo  -e >&2 "$PNAME : restore  of $BACKUP_SOURCE_REALPATH into \
$DEST_FOLDER complete!"   | journalThis 5 OneShot

elif [ $exit_code -gt 1 ] ; then

  if [ $exit_code -eq 130 ] ; then
      echo >&2 "$PNAME : User interrupted the operation"
  else
      echo >&2 "$PNAME : A fatal error occurred."
  fi
  if [[ $MADE_FOLDER = true && -d "$DEST_FOLDER" ]] ; then

    if [ $DRY_RUN = false ] ; then
      if [[ $VERBOSE = true || $DEBUG -eq 0 ]] ; then
        echo -e >&2 "$PNAME : Removing  folder to restore into  due fatal errors:\
\n rm -fr $TODAYS_BACKUP_FOLDER"
      fi
      rm -fr "$DEST_FOLDER"
    else
      echo -e >&2 "$PNAME : Removing  folder to restore into  due fatal errors:\
\n rm -fr $TODAYS_BACKUP_FOLDER"
    fi
  fi

fi
exit $exit_code


