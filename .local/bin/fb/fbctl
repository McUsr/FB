#!/bin/bash
# shellcheck disable=SC2034
VERSION="v0.0.4"


# fbctl.shi only runs from the console.
RUNTIME_MODE="CONSOLE"
# We are getting the backup-scheme passed as parameter from the
# <backup-scheme>.service, invoked by <backup-scheme>.timer.

# We check for an empty job folder first of all, and if it is, we shut down the
# whole service, and exits gracefully. Otherwise, we're calling up the
# manager(), to figure out the correct script to execute for that
# scheme/symlink, processes the next one, and so on.

# First we check if there is any jobs to dispatch from the jobs folder.


# Moving forward:
# Using the XDG_DATA_HOME, would give some leeway as to avoiding hard_coding of paths.
# We are still using this with service. SnapShot

# Config vars you can set to mostly control output.
DEBUG=1
VERBOSE=false # controls output during normal runs.
DRY_RUN=false
AT_ONCE=1
# controls whether to run thing immediately, or wait until things are
# picked up by the services.

# VERBOSE = TRUE is more of a debug option giving the hints as to what is processed
# With what.
export TERSE_OUTPUT=0
# Maybe we want a per scheme handling of  TERSE_OUTPUT
success_jobs=()


err_report() {
  echo >&2 "$PNAME : Error on line $1"
  echo >&2 "$PNAME : Please report this issue at \
'https://github.com/McUsr/FB/issues'"
}

trap 'err_report $LINENO' ERR



# dieIfCantSourceShellLibrary()
# sources the ShellLibraries
# so we can perform the rest of the tests.
# TODO: Think of modus.
dieIfCantSourceShellLibrary() {
  if [[ $# -ne 1 ]] ; then
    echo -e "$PNAME/${FUNCNAME[0]} : Need an\
    argument, an existing fb shell library file!\nTerminates..." >&2
    exit 5
  fi
  if [[ -r "${1}" ]] ; then
    source "${1}"
  #  source "$fpth"/service_functions.sh
  else
    echo -e  "$PNAME/${FUNCNAME[0]} : Can't find/source: ${1}\
      \nTerminates... " >&2
    exit 255
  fi
}


pathToSourcedFiles() {
  # shellcheck disable=SC2001,SC2086  # Escaped by sed
  pthname="$( echo $0  | sed 's/ /\\ /g' )"
  # We do escape any spaces, in the file name,
  #  knew it could never happen, just in case.
  # shellcheck disable=SC2086  # Escaped by sed
  fpth="$(realpath $pthname)"; fpth="${fpth%/*}"
  echo "$fpth"
}

# Program vars, read only,

PNAME=${0##*/}

curscheme="${PNAME%%.*}"

if [[ -t 1 ]] ; then
  RUNTIME_MODE="CONSOLE"
else
  RUNTIME_MODE="SERVICE"
fi


fbBinDir="$(pathToSourcedFiles)"
through_shellsheck=1
if [[ $through_shellsheck -ne 0  ]] ; then
  dieIfCantSourceShellLibrary "$fbBinDir"/service_functions.sh
else
# bootstrapping libraries before figuring system paths.
# shellcheck source=service_functions.sh
  source "$fbBinDir"/service_functions.sh
fi

if [[ $# -eq 0 ]] ; then
    echo -e >&2 "$PNAME : I didn't get a mandatory parameter.\
.. Enter: \"$PNAME -h\" for help.\nTerminating..."
  exit 2
fi


dieIfMandatoryVariableNotSet FB "$RUNTIME_MODE" "$curscheme"
dieIfMandatoryVariableNotSet XDG_BIN_HOME "$RUNTIME_MODE" "$curscheme"
dieIfMandatoryVariableNotSet XDG_DATA_HOME "$RUNTIME_MODE" "$curscheme"

dieIfNotDirectoryExist "$XDG_BIN_HOME"
dieIfNotDirectoryExist "$XDG_BIN_HOME/fb"
dieIfNotDirectoryExist "$XDG_DATA_HOME"
dieIfNotDirectoryExist "$XDG_DATA_HOME/fbjobs"

if [[ $through_shellsheck -ne 0  ]] ; then
  dieIfCantSourceShellLibrary "$fbBinDir"/shared_functions.sh
else
# shellcheck source=shared_functions.sh
  source "$fbBinDir"/shared_functions.sh
fi


dieIfNotOkBashVersion
consoleHasInternet "$curscheme"
consoleFBfolderIsMounted "$curscheme"

help() {
cat  << EOF

$PNAME:  Control the Folder Backup backup system.

Syntax:

  $PNAME  [options]  [action] [folder]

  Options:

  -h | --help.    Shows this help.
  -n | --dry-run  Shows what would have happened
  -v | --verbose  Shows more detailed output.
  -V | --version  Shows the version of $PNAME ($VERSION).
  -N | --now      Execute the command now.
  -A | --all      All, in some contexts.
  -S | --state=   Set the state to active/paused/stopped/installed.

  Job Control Commands:

  install       BACKUPSCHEME FOLDER

    Installs a new job under the chosen Backup scheme.

  start         BACKUPSCHEME FOLDER

    Starts an existing existing job, presumuably in either a paused,
    stopped, or installed state.

  stop          BACKUPSCHEME FOLDER

    Stops an existing job, by creating a SYMLINK.stopped file in the scheme's
    jobs folder, if the job stopped was the only running, the service is shut
    down.

  pause         BACKUPSCHEME FOLDER

    Pauses a job temporarily for some maintenance reason,  the service is kept
    alive whilst waiting for the job to be enabled, started or activated.


  run          BACKUPSCHEME FOLDER

    Lets you run a backup-job directly, for testing reasons with the optional
    `--dry-run` option, or otherwise.

  edit         BACKUPSCHEME FOLDER

    Edits a local dropin, unless the  --all switch is given, which edits
    the general dropin script for that folder.

  edit-restore BACKUPSCHEME FOLDER

    Edits a local dropin restore sccript, unless the  --all switch is given,
    which edits the general dropin restore script for that folder.

  edit-exclude BACKUPSCHEME FOLDER

    Edits a local dropin exclude  file, that contains globs that are to be 
    excluded from backup.

  job-state    BACKUPSCHEME FOLDER

    Shows the status of the specified single job, and all involved files with
    full path!

  cat         BACKUPSCHEME FOLDER

    Shows all involved files, including "dropins" and "exclude-files file" for
    that backup. (It catenates all the files from tha paths given by `job-state`.

  revert       BACKUPSCHEME FOLDER

    Reverts any customizations to an "original" plain state, removing any
    exclude files an other customizations.  list-jobs    FOLDER

    Lists all jobs for a folder under all backup schemes.

  list-jobs    BACKUPSCHEME

    Lists all jobs for one backup scheme.

  list-jobs    --state=[ACTIVE/PAUSED/INSTALLED/STOPPED]

    Lists all jobs with  the status supplied for all schemes.

  list-jobs     --all

    Lists all jobs with a current status for all schemes.

  Service Control Commands:

  check         BACKUPSCHEME

    Checks that the unit and timer is installed, and the current status.

  enable        BACKUPSCHEME

    Enables a service. presumably in either a disabled, or stopped state.
    Does a `systemctl --user daemon-reload` as well as starting in the process.

  disable    BACKUPSCHEME

    Disables a service, for editing or whatever, it stops the service in the
    process.

  configure  BACKUPSCHEME[.timer]

    Configures a service, or its timer. Stops and disables the service before
    editing.

  status    BACKUPSCHEME

    Shows various interesting properties of the service.

  Backup Control Commands

  list-backups BACKUPSCHEME | FOLDER

  restore-backup

    Make it easier maybe by select to restore a backup, but only to temp folder. 


  Backup Schemes:

  HourlySnapshot
  DailyIncremental
  DailyDifferential
  DailyFull
  WeeklyIncremental
  WeeklyDifferential
  WeeklyFull
  MonthlyIncremental
  MonthlyDifferential
  MonthlyFull

EOF
}


# TODO: installation. which is the default, without the --now option.
# parse options

ALL=false
STATE=( )
# shellcheck disable=SC2034
  GETOPT_COMPATIBLE=true
# time to parse some command line arguments!
# https://stackoverflow.com/questions/402377/using-getopts-to-process-long-and-short-command-line-options
  TEMP=$(getopt -o hvnVNAS: --longoptions help,verbose,dry-run,version,now,all,state: -n "$PNAME" -- "$@")
  # shellcheck disable=SC2181 # It's too long to put in  an if test, I feel!
  if [[ $? != 0 ]] ; then echo "$PNAME : Terminating..." >&2 ; exit 2 ; fi

  # Note the quotes around '$TEMP': they are essential!
  eval set -- "$TEMP"

  while true; do
      case "$1" in
        -h | --help )  help ; exit 0 ;;
        -n | --dry-run ) DRY_RUN=true; shift ;;
        -v | --verbose ) VERBOSE=true; shift ;;
        -V | --version ) echo "$PNAME" : $VERSION ; exit 0 ;;
        -N | --now ) AT_ONCE=true; shift ;;
        -A | --all ) ALL=true ; shift ;;
        -S | --state ) STATE+=("$2") ;  shift 2 ;;
        -- ) shift; break ;;
      esac
  done
# get command verbs
HAVING_ERRORS=false


if [[ $# -eq 0 ]] ; then
  echo -e "$PNAME : Wrong number of  few arguments. I need one argument for \
at least a command that takes no parameters.\nExecute \"$PNAME -h\" \
for help. Terminating..." >&2
  exit 2
fi
export CTL_COMMANDS=( install start stop pause run edit edit-restore \
  edit-exclude job-state cat revert list-jobs check enable disable configure  \
status list-backups restore-backup )


# okCommandName()
# RETURNS 0 if supplied shcemename is ok.
# PARAMETERS: scheme name to validate.
okCommandName() {
  if [[ $# -ne 1 ]] ; then
    echo -e >&2 "${FUNCNAME[@]} : I need an argument to validate as a \
scheme-name.\nTerminating..."
    exit 5
  fi
  local found
  found=1
  for ((i=0; i< ${#CTL_COMMANDS[@]} ; i++ )) ; do
    if [[ ${CTL_COMMANDS[$i]} == "$1" ]]; then
      found=0
      break
    fi
  done
  return $found
}


#  Needs to figure the correct number of arguments for the command name
if okCommandName "$1" ; then
  # args_needed includes the command name.
  case "$1" in
    install | start | stop | pause | run | edit | edit-restore | edit-exclude \
     job-state | cat | revert ) args_needed=3 ;;
    check | enable | disable | configure | status | list-backups )  \
      args_needed=2 ;;
    list-jobs ) args_needed=1 ;;
    *) echo EBAD_ARG ;;
  esac
else
  echo -e >&2 "$PNAME : Bad command name. \"$PNAME -h\" for help.\
\nTerminating..."
  exit 2
fi
cur_command="$1"

if [[ $# -lt $args_needed ]] ; then
  echo -e >&2 "$PNAME $cur_command : too few  arguments. \"$PNAME -h\" for help.\n\
Terminating..."
  exit 2
elif [[ $args_needed -eq  3 ]] ; then
# so far all commands that takes 3 arguments needs an ok scheme.
  if ! okSchemeName $2 ; then
    echo -e >&2 "$PNAME : $cur_command :  The scheme "$2" doesn't exist! \"$PNAME -h\" \
for help.\nTerminating..."
    exit 2
  else
    backup_scheme="$2"
  fi
   source_location="$3"
fi


source ~/wrk/FB/.local/bin/fb/loc_param.sh


# activateJob()
# removes the paused state of a job.

activateJob() {

  if ! nrargs 1 $#  "I need one argument!" ; then
    exit 2
  fi

  if ! isASymlink "$1" ; then
    err 1 "The parameter isn't a symlink!"
    exit 2
  fi

  paused_file="$1".paused
  if [[ -r "$paused_file" ]] ; then
    rm -fr "$paused_file"
    # TODO: Activating a job worth a notification?

  fi
}


# startJob()
# removes the paused state of a job.

startJob() {

  if ! nrargs 1 $#  "I need one argument!" ; then
    exit 2
  fi

  if ! isASymlink "$1" ; then
    err 1 "The parameter isn't a symlink!"
    exit 2
  fi

  stopped_file="$1".stopped
  if [[ -r "$stopped_file" ]] ; then
    rm -fr "$stopped_file"
    # TODO: Starting a job worth a notification?
  fi

  installed_file="$1".installed
  if [[ -r "$installed_file" ]] ; then
    rm -fr "$installed_file"
    # TODO: Starting a job worth a notification?
  fi
}


# stopJob()
# stops the execution job of a job by setting its
# state to stopped.
stopJob() {

  if ! nrargs 1 $#  "I need one argument!" ; then
    exit 2
  fi

  if ! isASymlink "$1" ; then
    err 1 "The parameter isn't a symlink!"
    exit 2
  fi

  stopped_file="$1".stopped
  if [[ ! -r "$stopped_file" ]] ; then
    touch "$stopped_file"
  fi
}


# pauseJob()
# pauses the execution job of a job by setting its
# state to paused.
pauseJob() {

  if ! nrargs 1 $#  "I need one argument!" ; then
    exit 2
  fi

  if ! isASymlink "$1" ; then
    err 1 "The parameter isn't a symlink!"
    exit 2
  fi

  paused_file="$1".paused
  if [[ ! -r "$paused_file" ]] ; then
    touch "$paused_file"
  fi
}

# workingSymLinksCount()
# Not symlinks that necessarily works, but symlinks that are
# intended to work? Maybe check for valid symlink name as well?

workingSymLinksCount() {

  if ! nrargs 1 $#  "I need one argument!" ; then
    exit 2
  fi
  job_fol="$1"
  suffixes=(installed stopped paused)
  declare -g ctr
  ctr=0
  for f in "$job_fol"/* ; do
    for s in "${suffixes[@]}" ; do
      [[ $f == *".$s" ]] || [[ -f "$f.$s" ]] && continue 2
    done
    [[ -h "$f" ]] && (( ctr += 1 ))
  done
  echo $ctr
}

# justSymlinkName()
# RETURNS: just the symlink name, from a backup scheme's job folder's full path,
# to a symlink.
# PARAMETERS: The full path to a symlink.
justSymlinkName() {
  if ! nrargs 1 $#  "I need just 1 argument!" ; then
    exit 2
  fi
  local stuff oldfs stuff argc
  oldfs=$IFS
  export IFS=/
  set -- $stuff
  argc=$#
  pieces=( $* )
  export IFS=$oldfs
  echo ${pieces[$argc]}
}


# assertBackupContainer()
# Asserts that the backup container exists.
# This piece is to be refactored as a call back
# into governor.sh where it was taken from.
# RETURNS: Nothing
# PARAMETERS: $backup_scheme $scheme_container  $symlink_name

assertBackupContainer() {
  if ! nrargs 3 $#  "I need three arguments!" ; then
    exit 2
  fi
  local backup_scheme scheme_container symlink_name
  backup_scheme="${1}"
  scheme_container="${2}"
  symlink_name="${3}"

  backup_container=$scheme_container/$symlink_name
  # Alt med backup_container skal over i fbinst e.l fbctl
  if [[ ! -d $backup_container ]] ; then
    mkdir -p "$backup_container"
    # we can go silent about this, or we can just send a message.
    if [[ $DEBUG -eq 0 ]] ; then
      routDebugMsg " : $backup_container didn't exist, que to \
make backup" "$backup_scheme"
    fi
  else
    if [[ $DEBUG -eq 0 ]] ; then
      routDebugMsg " :$backup_container exists, NO que to make \
backup." "$backup_scheme"
    fi
  fi
}


# execute_job_directly()
# Executes an installed or started job directly through the governor
# before it is run as a service.

execute_job_directly() {
  set -e
  if ! nrargs 3 $#  "I need three arguments!" ; then
    exit 2
  fi

  backup_scheme="${1}"
  just_symlink_name="${2}"
  sub_command="${3}"

  manager "$backup_scheme"  "$just_symlink_name" backup
  exit_code=$?
  if [ $exit_code  -eq 0 ] ; then
    backup_script="$DELEGATE_SCRIPT"
  else
    exit $exit_code
  fi

  exit_code=0
  trap '' ERR
  # shellcheck disable=SC2086 # No quoting of options!
  "$backup_script" "$backup_scheme" "$symlink_name"
  exit_code=$?

  if [[ $VERBOSE = true || $DEBUG -eq 0 || $DRY_RUN = true ]] ; then
    if [[ $exit_code -eq 0 ]] ; then
      echo -e >&2 "$PNAME  $sub_command --now : EXECUTING:\n$backup_script \
$backup_scheme $symlink_name SUCCESSFULLY!" \
      |& tee |& systemd-cat -t $backup_scheme -p 7
   else
      echo -e >&2 "$PNAME  $sub_command --now : EXECUTING:\n$backup_script \
$backup_scheme $symlink_name FAILED!" \
      |& tee |& systemd-cat -t $backup_scheme -p 7
    fi
  else
    if [[ $exit_code -eq 0 ]] ; then
      echo -e >&2 "$PNAME  $sub_command --now : EXECUTING:\n$backup_script \
$backup_scheme $symlink_name SUCCESSFULLY" \
  |& tee | systemd-cat -t $backup_scheme -p 5
   else
      echo -e >&2 "$PNAME  $sub_command --now : EXECUTING:\n$backup_script \
$backup_scheme $symlink_name FAILED!" \
      |& tee |& systemd-cat -t $backup_scheme -p 3
    fi
  fi

}
# start_existing_job()
# We figure if we have a
start_existing_job() {
  set -e
  if ! nrargs 2 $#  "I need two arguments!" ; then
    exit 2
  fi

  # err 1 "Faking a start  of $1 $2 "
  backup_scheme="$1"
  location_parameter="$2"
  jobs_folder="$XDG_DATA_HOME"/fbjobs/"$backup_scheme"

  jobCount=$(workingSymLinksCount "$jobs_folder")
  # We need the count of working symlinks for deducting
  # if we need to restart the service or not, which we
  # need if the count is zero.

  valid_symlink="$(symlinkInJobsFolder $backup_scheme "$location_parameter" \
    "$jobs_folder" )"
  # so we can go from stopped to paused. TODO: update docs.
  # here we take care of both stopped, installed and paused.
  activateJob "$valid_symlink"
  startJob "$valid_symlink"

  # err 1 "Valid symlink: $valid_symlink"

  if [[ $AT_ONCE -eq 0 ]] ; then

    # TODO: Assert backup container exists
    scheme_container="$( assertSchemeContainer "$backup_scheme" )"

    # runner, a dumbed down version of governor,
    # using the same stuff as fbrestore to figure
    # which scheme we should use to to make the
    # manager look for stuff.

    just_symlink_name="$(justSymlinkName "$valid_symlink")"
    # Need to find the symlink-name we're doing a lot twice.

    assertBackupContainer "$backup_scheme" "$scheme_container"  "$just_symlink_name"
    # We assert the Backucontainer is there, in case it is the first time.

    execute_job_directly "$backup_scheme"  "$just_symlink_name" start
  fi

#  TODO: figure out if we need to restart the service.
  if [[ $jobCount -eq 0 ]] ; then
    systemctl --user list-timers  --state=active \
      | grep "$backup_scheme".timer >/dev/null
    if [[ $? -ne 0 ]] ; then
      # Needs activation, the timer does.
      systemctl --user enable "$backup_scheme".timer  --now
      if [[ $? -ne 0 ]] ; then
        err 1 "Couldn't activate $backup_scheme.timer"
        exit 255
      fi
    fi
  fi
}


stop_existing_job() {
  echo >&2 "Stopping existing job"
  set -e
  if ! nrargs 2 $#  "I need two arguments!" ; then
    exit 2
  fi

  # err 1 "Faking a start  of $1 $2 "
  backup_scheme="$1"
  location_parameter="$2"
  jobs_folder="$XDG_DATA_HOME"/fbjobs/"$backup_scheme"

  valid_symlink="$(symlinkInJobsFolder $backup_scheme "$location_parameter" \
    "$jobs_folder" )"
  # so we can go from stopped to paused. TODO: update docs.
  # here we take care of both stopped, installed and paused.
  stopJob "$valid_symlink"
  # --now has no bearing here.
  jobCount=$(workingSymLinksCount "$jobs_folder")

  if [[ $jobCount -eq 0 ]] ; then
    systemctl --user list-timers  --state=active \
      | grep "$backup_scheme".timer >/dev/null
    if [[ $? -ne 0 ]] ; then
      # Needs activation, the timer does.
      systemctl --user disable "$backup_scheme".timer  --now
      if [[ $? -ne 0 ]] ; then
        err 1 "Couldn't disable $backup_scheme.timer"
        exit 255
      fi
    fi
  fi
}


# stop_existing_job()
# It is not an error to pause an already paused job.
# We don't shut down the timer. We let it run while the job is paused.
pause_existing_job() {
  echo >&2 "Pausing existing job"
  set -e
  if ! nrargs 2 $#  "I need two arguments!" ; then
    exit 2
  fi

  # err 1 "Faking a start  of $1 $2 "
  backup_scheme="$1"
  location_parameter="$2"
  jobs_folder="$XDG_DATA_HOME"/fbjobs/"$backup_scheme"

  valid_symlink="$(symlinkInJobsFolder $backup_scheme "$location_parameter" \
    "$jobs_folder" )"
  # so we can go from stopped to paused. TODO: update docs.
  # here we take care of both stopped, installed and paused.
  pauseJob "$valid_symlink"
  # --now has no bearing here.
}


# install_new_job()
# installs a new job under a scheme, we need to create the symlink, so
# the way we get our paths is kind of different here, in comparision to the
# existing jobs.

install_new_job() {

  set -e
  if ! nrargs 2 $#  "I need two arguments!" ; then
    exit 2
  fi

  # err 1 "Faking a start  of $1 $2 "
  backup_scheme="$1"
  location_parameter="$2"
  # Does the location exist?
  if [[ ! -r $location_parameter ]] ; then 
    err 1 "The location $location_parameter doesn't exist!"
    exit 2
  fi
  full_path="$(realpath "$location_parameter")"
  just_symlink_name="$(fullPathSymlinkName "$full_path")"
  # we set up things so it works.
  # we haven't checked that we have the service files!

  jobs_folder="$XDG_DATA_HOME"/fbjobs/"$backup_scheme"

  # if the symlink already exists we remove it and regenerate.

  if [[ $AT_ONCE -eq 0 ]] ; then
    # do we have a service up and running  for this service?
    jobCount=$(workingSymLinksCount "$jobs_folder")

    scheme_container="$( assertSchemeContainer "$backup_scheme" )"
    assertBackupContainer "$backup_scheme" "$scheme_container"  \
      "$just_symlink_name"
    ln -s "$full_path" "$jobs_folder"/"$just_symlink_name"
    execute_job_directly "$backup_scheme"  "$just_symlink_name" start

    if [[ $jobCount -eq 0 ]] ; then
      systemctl --user list-timers  --state=active \
        | grep "$backup_scheme".timer >/dev/null
      if [[ $? -ne 0 ]] ; then
        # Needs activation, the timer does.
        systemctl --user enable "$backup_scheme".timer  --now
        if [[ $? -ne 0 ]] ; then
          err 1 "Couldn't activate $backup_scheme.timer"
          exit 255
        fi
      fi
    fi
  else
    touch "$jobs_folder"/"$just_symlink_name".installed
    ln -s "$full_path" "$jobs_folder"/"$just_symlink_name"
  fi

}

run_existing_job() {
  echo Stub..
}

# edit_existing_job() 
# I belive I have stuff to use in shared/service functions.

edit_existing_job() {
  echo Stub..
}

edit_restore_job() {
  echo Stub..
}

edit_exclude_for_job() {
  echo Stub..
}

job_state() {
  echo Stub..
}

cat_existing_job() {
  echo Stub..
}

revert_existing_job() {
  echo Stub..
}

check_service() {
  echo Stub..
}

enable_service() {
  echo Stub..
}

disable_service() {
  echo Stub..
}

configure_service() {
  echo Stub..
}

status_for_service () {
  echo Stub..
}

# And now, it is time to actually parse the commands fully out.
case "$cur_command" in
    install) install_new_job  "$backup_scheme" "$source_location" ;;
    start) start_existing_job "$backup_scheme" "$source_location" ;;
    stop) stop_existing_job "$backup_scheme" "$source_location" ;;
    pause) pause_existing_job "$backup_scheme" "$source_location" ;;
    run) run_existing_job "$backup_scheme" "$source_location" ;;
    edit) edit_existing_job "$backup_scheme" "$source_location" ;;
    edit-restore) edit_restore_job "$backup_scheme" "$source_location" ;;
    edit-exclude) edit_exclude_for_job "$backup_scheme" "$source_location" ;;
    job-state) job_state "$backup_scheme" "$source_location" ;;
    cat) cat_existing_job "$backup_scheme" "$source_location" ;;
    revert) revert_existing_job "$backup_scheme" "$source_location" ;;
    check) check_service "$backup_scheme" ;;
    enable) enable_service "$backup_scheme" ;;
    disable) disable_service "$backup_scheme" ;;
    configure) configure_service "$backup_scheme" ;;
    # we need to do something here, .timer stuff
    status) status_for_service "$backup_scheme" ;;
    list-backups) list_backups "$backup_scheme" "$source_location" ;;
    restore-backup) restore_backup ;;
  *) echo EBAD_ARG ;;
esac



